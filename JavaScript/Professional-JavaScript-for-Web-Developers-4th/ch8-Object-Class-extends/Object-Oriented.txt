第8章 对象、类与面向对象编程

    ECMA-262将对象定义为一组属性的无序集合。严格来说，这意味着对象就是一组不有
特定顺序的值。对象的每个属性方法都由一个名称来标识，这外名称映射到一个值。正因
如此，可以把ECMAScript的对象想象成一张散列表，其中的内容就是一组名/值对，值可以
是数据或者函数。

8.1 理解对象

    创建自定义对象的通常方式是创建Object的一个新实例，然后再给它添加属性和方法。

8.1.1 属性的类型

    ECMA-262使用一些内部特性来描述属性的特征。这些特性是由JavaScript实现引擎的
规范定义的。因此，开发者不能在JavaScript中直接访问这些特征。为了将某个特性标识
为内部特性，规范会用两个中括号把特性的名称括起来。

    属性分为两种：数据属性和访问器属性

    1.数据属性
    
    数据属性有4个特性描述它们的行为。
    
    ·[[Configurable]]:表示属性是否可以通过delete删除并重新定义，是否可以修改它
        的特性，以及是否可以把它改成访问器属性。
    
    ·[[Enumerable]]:表示属性是否可以通过for-in循环返回。
    
    ·[[Writable]]:表示属性的值是否可以被修改。
    
    ·[[Value]]:包含属性实际的值。

    要修改属性的默认特性，必须使用Object.defineProperty()方法。

    2.访问器属性

    访问器属性不包含数据。相反，它们包含一个获取(getter)函数和一个设置(setter)
函数，不过这两个函数不是必需的。

    访问器属性有4个特性描述它们的行为：
    
    ·[[Configurable]]:表示属性是否可以通过delete删除并重新定义，是否可以修改它
        的特性，以及是否可以把它改为数据属性。

    ·[[Enumerable]]:表示属性是否可以通过for-in循环返回。

    ·[[Get]]:获取函数，在读取属性时调用。

    ·[[Set]]:设置函数，在定稿属性时调用。

    访问器属性不能直接定义，必须使用Object.defineProperty()。

--------------------------------------------------------------------------------
8.2 创建对象
    
    ECMAScript6开始正式支持类和继承。

8.2.2 工厂模式

8.2.3 构造函数模式

    按照惯例，构造函数名称的首字母都是要大写的，非构造函数则以小写字母开头。创
建函数的实例，应使用new操作符。以这种方式调用构造函数会执行如下操作：
    
    (1)在内存中创建一个新对象。

    (2)这个新对象内部的[[Prototype]]特性被赋值为构造函数的prototype属性。

    (3)构造函数内部this被赋值为这个新对象（即this指向新对象）。

    (4)执行构造函数内部的代码（给新对象添加属性）。

    (5)如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。

8.2.4 原型模式
    
    每个函数都会创建一个prototype属性，这个属性是一个对象，包含应该由特定引用类
型的实例共享的属性和方法。实际上，这个对象就是通过调用构造函数创建的对象的原型。
使用原型对象的好处是，在它上面定义的属性和方法可以被对象实例共享。原来要构造函
数中直接赋给对象实例的值，可以直接赋值给它们的原型。

    1.理解原型
    无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个prototype
属性。默认情况下，所有原型对象自动获取一个名为constructor的属性，指回与之关联
的构造函数。

    2.原型层级
    
    3.原型与in操作符
    有两种方式使用in操作符：单独使用和在for-in循环中使用。在单独使用时，in操作
符会在可以通过对象访问指定属性时返回true，无论该属性是在实例上还是在原型上。

--------------------------------------------------------------------------------
8.3 继承
    
    实现继承是ECMAScript唯一支持的继承方式，而这主要是通过原型链实现的。

--------------------------------------------------------------------------------
8.4 类

    ECMAScript6新引入的class关键字具有正式定义类的能力。

8.4.1 类定义

    与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用
class关键字加大括号：

    class Person { }

    const Animal = class { };

    类定义声明不可以被提升。

    类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法，但这些都
不是必需的，空的类定义照样有效。默认情况下，类定义中的代码都在严格模式下执行。

8.4.2 类构造函数

