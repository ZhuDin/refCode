第3章 通用编程概念


·变量与可变量

    Rust中的变量默认是不可变的。可以通过在声明变量名称前添加mut关键字来使
其可变。

·变量与常量之间的不同

    变量的不可变性与另一个常见的编程概念：常量(constant)之间存在一些细微的
差别。

    首先，我们不能用mut关键字来修饰一个常量。常量不仅是默认不可变的，它还总
是不可变的。

    其次需要使用const关键字而不是let关键字来声明一个常量。在声明的同时，必须
显式地标注值的类型。

    再次，常量可以被声明在任何作用域中，甚至包括全局作用域。

    最后，只能将常量绑定到一个常量表达式上，而无法将一个函数的返回值，或其他
需要在运行时计算的值绑定到常量上。

    在Rust中，约定俗成地使用下画线分隔的全大写字母来命名一个常量，并在数值中
插入下画线来提高可读性。

--------------------------------------------------------------------------------
·隐藏

    当一个新声明的变量可以覆盖掉旧的同名变量，在Rust中，把这一现象描述为：第
一个变量被第二个变量隐藏(shadow)了。这意味着我们随后使用这个名称时，它指向的
将会是第二个变量。

    隐藏机制不同于将变量声明为mut，因为如果不使用let关键字重新为变量赋值，则
会导致编译错误。

    隐藏机制与mut的另一个区别在于：由于重复使用let关键字会创建出新的变量，所
以可以在利用变量名称的同时改变它的类型。

--------------------------------------------------------------------------------
·数据类型

    Rust是一门静态类型语言，这意味着它在编译程序的过程中需要知道所有变量的具
体类型。

·标量类型

    标量类型是单个值类型的统称。Rust中内建了4种基础的标题类型：整数、浮点数、
布尔值及字符。

    整数是指那些没有小数部分的数字。每一个长度不同的值都存在有符号和无符号两
种变体，它们可以用来描述不同类型的整数。

    长度          有符号           无符号
    8-bit           i8              u8
    16-bit          i16             u16
    32-bit          i32             u32
    64-bit          i64             u64
    arch            isize           usize

    有符号和无符号代表了一个整数是否拥有描述负数的能力。而isize和usize是两种
特殊的整数类型，它们的长度取决于程序运行的目标平台。在64位架构上，它们就是64位
的，在32位架构上，它们就是32位的。

    整数字面量：            示例
    Decimal                 98_222
    Hex                     0xff
    Octal                   0o77
    Binary                  0b111_000
    Byte(u8 only)           b'A'
    
    除Byte外，所有整数字面量都可以使用类型后缀，如57u8，代表一个使用了u8类型的
整数57。同时也可以使用_作为分隔符以方便读数。Rust对于整数字面量默认类型是i32。

    浮点数是带小数的数字。Rust提供了两种基础类型：f32和f64，它们分别占用32位和
64位空间，由于现代CPU中f64与f32的运行效率相差无几，却拥有更高的精度，所以在Rust
中，默认会将浮点数字面量的类型推导为f64。

    Rust的布尔类型只拥有两个可能的值：true和false，它会占据单个字节的空间大小。

    在Rust中，char类型被用于描述语言中最基础的单个字符。char类型使用单引号指定，
而不同于字符串使用双引号指定。char类型占4字节，是一个Unicode标题值。

·复合类型

    复合类型(compound type)可以将多个不同类型的值组合为一个类型。Rust提供了两种
内置的基础复合类型：元组(tuple)和数组(array)。

    元组是一种固定长度类型，无法在声明结束后增加或减少其中的元素数量。创建元组，
需要把一系列的值使用逗号分隔后放置到一对圆括号中。元组每个位置的值都有一个类型，
这些类型不需要是相同的。例：let tup: (i32, f64, u8) = (500, 6.4 1);

    数组中的每一个元素都必须是相同的类型。Rust中的数组拥有固定的长度，一旦声明
就再也不能随意更改大小。创建数组，可以将以逗号分隔的值放置在一对方括号内。而声
明数组类型时需使用一对方括号，并在方括号中填写数组内所有元素的类型、一个分号及
数组内元素的数量。例：let a: [i32; 5] = [1, 2, 3, 4, 5];

    Rust标准库也提供了一个更加灵活的动态数组(vector)类型。动态数组是一个类似于
数组的集合结构，但它允许用户自由地调整数组长度。

--------------------------------------------------------------------------------
·函数

    Rust代码使用蛇形命名法(snake case)来作为规范函数和变量名称的风格。蛇形命名
法只使用小写的字母进行命名，并以下画线分隔单词。

    在Rust中，函数定义以fn关键字开始并紧随函数名称与一对圆括号，另外还有一对花
括号用于标识函数体开始和结尾的地方。

·函数参数

    可以在函数声明中定义参数(parameter)，它们是一种特殊的变量，并被视作函数签名
的一部分。当函数存在参数时，需要调用函数时为这些变量提供具体的值。在技术文档中，
参数变量和传入的具体参数值有自己分别对应的名称parameter-形参和argument-实参。

    在函数签名中，必须显式地声明每个参数的类型。

·函数体中的语句和表达式

    函数体由若干条语句组成，并可以以一个表达式作为结尾。Rust是一门基于表达式的
语言，它将语句(statement)和表达式(expression)区别为两个不同的概念。

    语句是指那些执行操作但不返回值的指令，而表达式则是指会进行计算并产生一个值
作为结果的指令。表达式本身也可以作为语句的一部分。

·函数的返回值

    函数可以向调用它的代码返回值。虽然可以不用为返回值命名，但需要在箭头符号
(->)的后面声明它的类型。在Rust中，函数的返回值等同于函数体最后一个表达式的值。
可以使用return关键字并指定一个值来提前从函数中返回，但大多数函数都隐式地返回了
最后的表达式。

·注释

    在Rust中，注释(comment)使用两道斜杠开始，并持续到本行结尾。

-------------------------------------------------------------------------------
·控制流

    通过条件来执行或重复执行某些代码是编程语言的基础组成部分。在Rust中用来控制
程序流的结构主要就是if表达式与循环表达式。

·if表达式

    if表达式允许我们根据条件执行不同的代码分支。

·使用循环重复执行代码

    Rust提供了鑫种循环(loop)工具：loop、while和for。