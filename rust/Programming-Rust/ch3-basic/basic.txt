第3章 基本类型

    Rust的类型服务于3个目的。

    ·安全
    
      通过检查程序的类型，Rust编译器可以防止各种常见错误。

    ·效率

      程序员对Rust程序如何表示内存中的值可以进行非常细粒度的控制。

    ·简洁

      程序员只需在代码中写出类型，Rust就可全权负责而无须过多提示。

    Rust在设计时没有考虑解析器或即时（JIT, Just In Time）编译器，而是选择了事先
编译。即Rust程序在执行之前会被转换为机器码。

    Rust是静态类型的语言，即无须实际运行程序，编译器就可检查所有可能的执行路径，
确保程序以类型一致的方式使用每一个值。

    ·Rust可以根据写出的类型推断其余大部分值的类型。

    ·函数可以是泛型的。

--------------------------------------------------------------------------------
3.1 机器类型

    Rust类型的基础是一组固定宽度的数值类型，以及布尔类型的字符类型。其数值类型
的命名遵循一种规律，即要同时写出位宽及其表现形式。

3.1.1 整数类型

3.1.2 浮点类型

    Rust支持IEEE单、双精度浮点类型。遵循IEEE 754-2008标准，这些类型包含正、负无
穷，区分正、负零，还有一个非数值(not-a-number)值。

    浮点数值中除了整数部分，其他部分都是可选的，但小数部分、指数和类型后缀这三
者中至少要有一个存在，这样才能将它跟整数字面量区分开。

3.1.3 布尔类型

3.1.4 字符类型

    Rust的字符类型char以32位值的形式表示单个Unicode字符。
--------------------------------------------------------------------------------
