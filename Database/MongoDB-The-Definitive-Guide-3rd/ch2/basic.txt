文档是MongoDB中的基本数据单元，可以粗略地认为其相当于关系数据库管理系统中的行。
类似地，集合可以被看作具有动态模式的表(table)。
一个MongoDB实例（文件夹）可以拥有多个独立的数据库（文件），每个数据库都拥有自己的集合。
每个文档都有一个特殊的键"_id"，其在所属的集合中是唯一的。
MongoDB自带了一个简单但功能强大的工具：mongo shell。

--------------------------------------------------------------------------------
2.1 文档
----文档是MongoDB的核心概念：它是一组有序键值的集合。-------------------------------
    文档中的键是字符串类型。除了少数例外的情况，可以使用任意UTF-8字符作为键。
        -键中不能含有\0（空字符）。这个字符用于表示一个键的结束。
        -.和$是特殊字符，只能在某些特定情况下使用。
    MongoDB会区分类型和大小写。
    MongoDB中的文档不能包含重复的键。

--------------------------------------------------------------------------------
2.2 集合
    集合就是一组文档。如果将文档比作关系数据库中的行，那么一个集合就相当于一张表。

2.2.1 动态模式
    集合具有动态模式的特性。这意味着一个集合中的文档可以具有任意数量的不同“形状”。
    然而建议使用多个集合的原因：
        -获取集合列表比提取集合中的文档类型列表要快得多。
        -将相同类型的文档放入同一个集合中可以实现数据的局部性。
        -在创建索引时，通过只将单一类型的文档放入集合中，可以更高效地对集合进行索引。
        
2.2.2 命名
    集合由其名称进行标识。集合名称可以是任意UTF-8字符串，但有以下限制。
        -集合名称不能是空字符串("")。
        -集合名称不能含有\0（空字符），因为这个字符用于表示一个集合名称的结束。
        -集合名称不能以system.开头，该前缀是为内部集合保留的。
        -用户创建的集合名称中不应包含保留字符$。

    子集合
    使用.字符分隔不同命名空间的子集合是一种组织集合的惯例。

--------------------------------------------------------------------------------
2.3 数据库
    MongoDB使用集合对文档进行分组，使用数据库对集合进行分组。
    一个MongoDB实例可以承载多个数据库，每个数据库有零个或多个集合。
    与集合相同，数据库也是按照名称进行标识的。数据库名称可以是任意UTF-8字符串，但：
        -数据库名称不能是空字符串("")。
        -数据库名称不能包含/、\、.、"、*、<、>、:、|、？、$、单一的空格
         以及\0（空字符），基本上只能使用ASCII字母和数字。
        -数据库名称区分大小写。
        -数据库名称的长度限制为64字节。

    通过将数据库名称与该库中的集合名称连接起来，可以获得一个完全限定的集合名称，称为命名
    空间。命名空间长度限制为120字节，而实际使用时应该小于100字节。

--------------------------------------------------------------------------------
2.4 启动MongoDB
    要启动MongoDB服务器端，需要在命令行环境中运行mongod可执行文件。
    默认情况下，MongoDB会监听27017端口上的套接字连接。

--------------------------------------------------------------------------------
2.5 MongoDB shell介绍
    MongoDB自带Javascript shell，允许使用命令行与MongoDB实例进行交互。
    要启动shell，运行mongosh可执行文件。

2.5.2 MongoDB客户端
    启动shell时会连接到MongoDB服务器端的test数据库，并将此数据库连接赋值给全局变量db。
    此变量是通过shell访问MongoDB服务器端的主要入口点。
    要查看db当前指向哪个数据库，键入db并按回车键：
    > db
    要查看所有数据库：
    > show dbs
    要选择数据库：
    > use db_xx
    要查看当前数据库中的所有的表：
    > show tables
    要查看当前数据库中某表的内容：
    > db.table_x.find()

2.5.3 shell中的基本操作
    可以使用创建、读取、更新以及删除（CRUD）这4种操作在shell中操作和查看数据。
    
    1.创建
        insertOne函数可以将一个文档添加到集合中。（文档是键值对字典）
        db.table_x.insertOne({'key': 'value'})

    2.读取
        find和findOne方法可用于查询集合中的文档。

    3.更新
        如果想修改文档，可以使用updateOne。
        updateOne会接受（至少）两个参数：
            第一个用于查找要更新文档的限定条件
            第二个用于描述要进行更新的文档

    4.删除
        deleteOne和deletemany方法会从数据库中永久删除文档。
        这两种方法都采用一个指定删除条件的过滤文档作为参数。

--------------------------------------------------------------------------------
2.6 数据类型

2.6.1 基本数据类型

    null
        null类型用于表示空值或不存在的字段。

    布尔类型
        布尔类型的值可以为true或者false。

    数值类型
        shell默认使用64位的浮点数来表示数值类型。

    字符串类型
        任何UTF-8字符串都可以使用字符串类型来表示。

    日期类型
        MongoDB会将日期类型存储为64位整数，表示自Unix纪元（1970年1月1日）以来的毫秒
        数，不包含时区信息。

    正则表达式
        查询时可以使用正则表达式，语法与JavaScript的正则表达式语法相同。

    数组类型
        集合或者列表可以表示为数组。
        
    内嵌文档
        文档可以嵌套其他文档，此时被嵌套的文档就成了父文档的值。

    Object ID
        Object ID是一个12字节的ID，是文档的唯一标识。

    二进制数据
        二进制数据是任意字节的字符串，不能通过shell操作。

    代码
        MongoDB还可以在查询和文档中存储任意的JavaScript代码。

2.6.5 ObjectId和_id
    MongoDB中存储的每个文档都必须有一个"_id"键。"_id"的值可以是任何类型，但其默认为
    ObjectId。

    在单个集合中每个文档的"_id"值都必须是唯一的，以确保集合中的每个文档都可以被
    唯一标识。
    
    ObjectId占用了12字节的存储空间，可以用24个十六进制表示，是按照如下方式生成的：
        0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  10  |  11  
             时间戳           |           随机值            | 计数器（起始值随机）

--------------------------------------------------------------------------------
2.7 使用MongoDB shell
    
