第6章 集合引用类型

6.1 Object

    显式地创建Object的实例有两种方式。第一种是使用new操作符和Object构造函数。

    另一种方式是使用对象字面量(object literal)表示法。如object = {}

--------------------------------------------------------------------------------
6.2 Array

    数组中的每个槽位可以存储任意类型的数据。且其大小也是动态的，会随着数据添加
而自动增长。

6.2.1 创建数组

    有几种基本的方式可以创建数组。一种是使用Array构造函数，另一种创建数组 的方式
是使用数组字面量(array literal)表示法。如array = []
    
    构造函数还有两个新增用于创建数组的静态方法：from()和of()。from()用于将类数
组结构转换为数组实例，而of()用于将一组参数转换为数组实例。

6.2.2 数组空位

    使用数组字面量初始化数组时，可以使用一串逗号来创建空位(hole)。ES6新增方法普
遍将这些空位当成存在的元素，只不过值为undefined。

6.2.3 数组索引

    要取得或设置数组的值，需要使用中括号并提供相应值的数字索引。数组中元素的数
量保存在length属性中，这个属性始终返回0或大于0的值。通过修改length属性，可以从
数组末尾删除或添加元素。如果将length设置为大于数组元素数的值，则新添加的元素都
将以undefined填充。数组最多可以包含4 294 967 295个元素。

6.2.4 检测数组

    ECMAScript提供了Array.isArray()方法。这个方法的目的就是确定一个值是否为数组，
而不用管其在哪个全局执行上下文中创建的。

6.2.5 迭代器方法

    在ES6中，Array的原型上暴露了3个用于检索数组内容的方法：
    ·keys()返回数组索引的迭代器
    ·values()返回数组元素的迭代器
    ·entries()返回索引/值对的迭代器

6.2.6 复制和填充的方法

    ES6新增了两个方法：批量复制方法copyWithin()，以及填充数组方法fill()。这两个
方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结
束索引。

6.2.7 转换方法

    所有对象都有toLocalString()、toString()和valueOf()方法。其中valueOf()返回的
还是数组本身。而toString()返回由数组中每个值的等效字符串拼接而成的一个逗号分隔
的字符串。

6.2.8 栈方法

6.2.9 队列方法

6.2.10 排序方法

    数组有两个方法可以用来对元素重新排序：reverse()和sort()。

6.2.11 操作方法

    concat()方法可以在现在数组全部元素基础上创建一个新数组。

    slice()用于创建一个包含原有数组中一个或多个元素的新数组。

    splice()的主要目的是在数组中间插入元素。

6.2.12 搜索和位置方法

6.2.13 迭代方法

    every()：对数组每一项运行传入的函数，如果每一项都返回true，则方法返回true。
    
    filter()：对数组每一项都运行传入的函数，返回true的项会组成数组之后返回。

    forEach()：对数组每一项都运行传入的函数，没有返回值。

    map()：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。

    some()：对数组每一项都运行传入的函数，如果有一项返回true，则方法返回true。

--------------------------------------------------------------------------------
6.3 定型数组

    定型数组(typed array)是ECMAScript新增的结构，目的是提升向原生库传输数据的
效率。

6.3.2 ArrayBuffer

    Float32Array实际上是一种“视图”，可以允许JavaScript运行时访问一块名为
ArrayBuffer的预分配内存。ArrayBuffer是所有定型数组及视图引用的基本单位。

    ArrayBuffer()是一个普通的JavaScript构造函数，用于在内存中分配特定数量的字节
空间。其一经创建就不能再调整大小。

6.3.3 DateView
    
--------------------------------------------------------------------------------
6.4 Map
    
    ECMAScript6以前，在JavaScript中实现“键/值”式存储可以使用Object来方便高效
地完成，也就是使用对象属性作为键，再使用属性来引用值。

    TC39委员会专门为“键/值”存储定义了一个规范，作为ECMAScript6的新增特性，
Map是一种集合类型，为这门语言带来了真正的键/值存储机制。

6.4.1 基本API

    使用new关键字和Map构造函数可以创建一个空映射。如果想在创建的同时初始化实例，
可以给Map构造函数传入一个可迭代对象，需要包含键/值对数组。初始化之后，可以使用
set()方法再添加键/值对，使用get()和has()进行查询，通过size属性获取映射中的键/值
对的数量，还可以使用delete()和clear()删除值。

6.4.2 顺序与迭代

    Map实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作。

--------------------------------------------------------------------------------
6.5 WeakMap

    ECMAScript6新增“弱映射”(WeakMap)是一种新的集合类型，为这门语言带来了增强
的键值对存储机制。

--------------------------------------------------------------------------------
6.6 Set

    ECMAScript6新增的Set是一种新集合的类型，为这门语言带来了集合数据结构。