    JavaScript变量是松散类型的

-------------------------------------------------------------------------------
4.1 原始值与引用值

    ECMAScript变量可以包含两种不同类型的数据：原始值和引用值。原始值(primitive 
value)就是最简单的数据，引用值(reference value)则是由多个值构成的对象。

    保存原始值是按值(by value)访问的，操作的就是存储在变量中的实际值。
    
    而引用值是保存在内存中的对象，操作对象时，实际上操作的是对该对象的引用而非
实际的对象本身。为此，保存引用值的变量是按引用(by reference)访问的。

-------------------------------------------------------------------------------
4.1.1 动态属性

    对于引用值而言，可以随时添加、修改和删除其属性和方法。

    原始值不能有属性，尽管尝试给原始值添加属性不会报错。

-------------------------------------------------------------------------------
4.2 执行上下文与作用域

    变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。

    全局上下文是最外层的上下文。根据ECMAScript实现的宿主环境，表示全局上下文的
对象可能不一样。在浏览器中，全局上下文就是我们常说的window对象，因此所有通过var
定义的全局变量和函数都会成为window对象的属性和方法。使用let和const的顶级声明不
会定义在全局上下文中，但在作用域链解析上效果是一样的。

    上下文在其所有代码都执行完毕后会被销毁，包括定义在它上面的所有变量和函数。

-------------------------------------------------------------------------------
4.2.2 变量声明

    在使用var声明变量时，变量会被自动添加到最接近的上下文。

    如果变量未经声明就被初始化（即未使用var、let或const之一声明变量），
那么它就会被自动添加到全局上下文。

    var声明会被拿到函数或全局作用域的顶部，位于作用域中的所有代码之前。
这个现象叫作“提升”(hoisting)。

    let关键字跟var相似，但它的作用域是块级的，块级作用域由最近的一对包含
花括号{}界定。

    使用const声明的变量必须同时初始化为某个值，一经声明，在其生命周期的任何时候
都不能再重新赋予新值。

-------------------------------------------------------------------------------
