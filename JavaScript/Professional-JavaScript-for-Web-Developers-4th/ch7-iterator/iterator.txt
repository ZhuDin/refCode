第7章

    ECMAScript6规范新增了两个高级特性：迭代器和生成器。

7.2 迭代器模式
    
    迭代器模式描述了一个方案，即可以把有些结构称为“可迭代对象”(iterable)，因
为它们实现了正式的Iterable接口，而且可以通过迭代器Iterator消费。

    可迭代对象是一种抽象的说法。基本上，可以把迭代对象理解成数组或集合这样的集
合类型的对象。它们包含的元素都是有限的，而且都是有无歧义的遍历顺序。

    任何实现Iterator接口的数据结构都可以被实现Iterator接口的结构“消费”
(consume)。迭代器(iterator)是按需创建的一次性对象。每个迭代器都会关联一个可迭
代对象，而迭代器会暴露迭代其关联可迭代对象的API。迭代器无须了解与其关联的可迭代
对象的结构，只需要知道如何取得连续的值。

7.2.1 可迭代协议

    实现Interable接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力
和创建实现Interator接口的对象的能力。
    
    很多内置类型都实现了Iterable接口：
    ·字符串
    ·数组
    ·映射
    ·集合
    ·arguments对象
    ·NodeList等DOM集合类型

    可接收迭代对象的原生语言特性包括：
    ·for-of循环
    ·数组解构
    ·扩展操作符
    ·Array.from()
    ·创建集合
    ·创建映射
    ·Promise.all()接收由期约组成的可迭代对象
    ·Promise.race()接收由期约组成的可迭代对象
    ·yield*操作符，在生成器中使用

7.2.4 提前终止迭代器

    可选的return()方法用于指定在迭代器提前关闭时执行逻辑。执行迭代的结构在想让
迭代器知道它不想遍历迭代对象耗尽时，就可以“关闭”迭代器。可能的情况包括；
    
    ·for-of循环通过break、continue、return或throw提前即出
    ·解构操作并未消费所有值

--------------------------------------------------------------------------------
7.3 生成器

    生成器是ECMAScript6新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代
码执行的能力。

7.3.1 生成器基础

    生成器的形式是一个函数，函数名称前面加一个星号(*)表示它是一个生成器。只要是
可以定义函数的地方，就可以定义生成器。

    调用生成器函数会产生一个生成器对象。生成器对象一开始牌暂停执行(suspended)的
状态。与迭代器相似，生成器对象也实现了Iterator接口，因此具有next()方法。调用这
个方法会让生成器开始或恢复执行。

7.3.2 通过yield中断执行

    yield关键字可以让生成器停止和开始执行，也是生成器最有用的地方。生成器函数在
遇到yield关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会
被保留。停止执行的生成器函数只能通过在生成器对象上调用next()方法来恢复执行。

    yield关键字只能在生成器函数内部使用，用在其他地方会抛出错误。

7.3.4 提前终止生成器
    
    与迭代器类似，生成器也支持“可关闭”的概念。一个实现Iterator接口的对象一定
有next()方法，还有一个可选的return()方法用于提前终止迭代器。生成器对象除了有这
两个方法，还有第三个方法：throw()。
