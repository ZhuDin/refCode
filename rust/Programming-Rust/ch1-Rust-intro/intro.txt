第1章 为什么是Rust

    总的来说，C++实现遵循零开销原则：不用的，不必为之付出代价；要用的，也不会
有代码比它更好。

    在此基础之上，Rust又追加了自己内存安全和可靠并发的目标。

    Rust安全可靠的关键在于所有权(ownership)、转移(move)和借用(borrow)机制造就
的新型系统，而编译时检查和认真的设计又成就了Rust灵活的静态类型系统。

    所有权机制为每个值规划了清晰的生命期，从而让核心语言不再需要垃圾收集，同时
还为管理套接口(socket)和文件勾柄(handle)等资源提供了可靠而又灵活的接口。

    转移把值从一个所有者转移给另一个所有者，而借用让代码可以临时使用某个值，同
时又不影响其所有权。