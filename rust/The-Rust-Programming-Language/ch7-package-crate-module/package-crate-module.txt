第7章 使用包、单元包及模块来管理项目

    随着项目的成熟，可将代码拆分为不同的模块并使用不同的文件来管理。
一个包(package)可以拥有多个二进制单元包及一个可选的库单元包。对于特别巨大，拥有
多个相互关联的包的项目，Cargo提供了工作空间(workspace)。

    除了对功能进行分组，对实现的细节进行封装可以在更高的层次上利用代码。

    Rust提供了一系列的功能来帮助管理代码，包括决定哪些细节是暴露的、哪些细节是
私有的，以及不同的作用域内存在哪些名称。这些功能有时被统称为模块系统(module
system)，它们包括：

    ·包(package)：一个用于构建、测试并分享单元包的Cargo功能。

    ·单元包(crate)：一个用于生成库或可执行文件的树形模块结构。

    ·模块(module)及use关键字：它们被用于控制文件结构、作用域及路径的私有性。

    ·路径(path)：一种用于命名条目的方法，这些条目包括结构体、函数和模块等。

--------------------------------------------------------------------------------
包与单元包

    一个包中只能拥有最多一个库单元包，但可以拥有任意多个二进制单元包。而且包内
必须存在至少一个单元包（库单元包或二进制单元包）。

通过定义模块来控制作用域及私有性